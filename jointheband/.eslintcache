[{"/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/index.js":"1","/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/reportWebVitals.js":"2","/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/App.js":"3","/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/services/index.js":"4","/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/components/Form.jsx":"5","/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/components/Home.jsx":"6","/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/components/AllProfiles.jsx":"7","/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/components/SearchResults.jsx":"8","/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/components/Profile.jsx":"9","/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/components/NoResults.jsx":"10","/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/components/SocialMedia.jsx":"11"},{"size":540,"mtime":1607354844984,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1607228258478,"results":"14","hashOfConfig":"13"},{"size":12087,"mtime":1619209430814,"results":"15","hashOfConfig":"13"},{"size":201,"mtime":1607229872188,"results":"16","hashOfConfig":"13"},{"size":4232,"mtime":1619140510492,"results":"17","hashOfConfig":"13"},{"size":1035,"mtime":1619207925106,"results":"18","hashOfConfig":"13"},{"size":823,"mtime":1619140510492,"results":"19","hashOfConfig":"13"},{"size":572,"mtime":1619208753969,"results":"20","hashOfConfig":"13"},{"size":1563,"mtime":1607655147124,"results":"21","hashOfConfig":"13"},{"size":432,"mtime":1619208760803,"results":"22","hashOfConfig":"13"},{"size":1808,"mtime":1607657366325,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"tel3u0",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/index.js",[],["52","53"],"/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/reportWebVitals.js",[],"/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/App.js",["54","55"],"import './App.css';\nimport { baseURL, config } from \"./services\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\"\nimport { Route, Link } from \"react-router-dom\";\nimport Form from \"./components/Form.jsx\"\nimport Home from \"./components/Home.jsx\"\nimport AllProfiles from \"./components/AllProfiles.jsx\"\nimport SearchResults from \"./components/SearchResults.jsx\"\nimport NoResults from \"./components/NoResults.jsx\"\nimport violinsound from \"./sounds/violinsound.mp3\"\nimport basssound from \"./sounds/basssoundone.mp3\"\nimport drumsound from \"./sounds/drumsound.mp3\";\nimport basssoundtwo from \"./sounds/harpsound.mp3\";\nimport guitarsound from \"./sounds/guitarstrum.mp3\";\n\nfunction App() {\n  const bassAudioTwo = new Audio(basssoundtwo);\n  bassAudioTwo.volume = 0.02;\n  const guitarAudio = new Audio(guitarsound);\n  guitarAudio.volume = 0.02;\n\n  const [data, setData] = useState([])\n  let results = 0;\n  // we will we use findMusician and searchResult to \n  // store profiles that match the user's search later on\n  let findMusician = [];\n  let findMusician2 = [];\n  let findMusician3 = [];\n  // state variables\n  const [searchResult1, setSearchResult1] = useState([]);\n  const [searchResult2, setSearchResult2] = useState([]);\n  const [searchResult3, setSearchResult3] = useState([]);\n  const [searchValue, setSearchValue] = useState([]);\n  const [warningMessage, setWarningMessage] = useState('');\n\n  // here we create variables to represent the sounds we \n  // have stored in the sound folder. Later on, we will \n  // trigger these sounds in response to user input\n  const violinAudio = new Audio(violinsound);\n  violinAudio.volume = 0.05;\n  const bassAudio = new Audio(basssound);\n  bassAudio.volume = 0.05;\n  const drumAudio = new Audio(drumsound);\n  drumAudio.volume = 0.05;\n  const [toggleFetch, setToggleFetch] = useState(true)\n  \n  useEffect(() => {\n    async function getData() {\n      let response = await axios.get(baseURL + '/Musicians', config)\n      setData(response.data.records)\n    }\n    getData();\n    // toggleFetch makes sure that API call occurs \n    // everytime the boolean value of 'toggleFetch' changes.\n    // In our <Form/>, there is a 'refresh' pop equal to \n    // 'toggleFetch.' When you click the submit button on the form\n    // an axios.put request is made to Airtable, and\n    // props.refresh is changed to be the opposite of \n    // whatever it previously was. Thus 'toggleFetch' is changed.\n    // this ensures than useEffect runs again, and the new profile \n    // we just created is pulled down into React.\n  }, [toggleFetch])\n\n  const search = (e) => {\n    // sets the state variable 'searchValue' equal to the user's \n    // input\n      setSearchValue(e.target.value)\n  };\n\n  // the search function \n\n  const searchSubmit = (e) => {\n    console.clear();\n    // if you press enter more than once, you get a number\n    // instead of a string. I used this to create a warning message.\n    if (typeof searchValue === 'number') {\n      e.preventDefault()\n      setWarningMessage(\"* type something new!\")\n    }\n    else {\n      setWarningMessage(\"\")\n    }\n    if (searchValue.length > 0) {\n      // if there are multiple words in the user's seach, \n      // eg 'Guitar NYC', searchValueIndividualWords splits \n      // them into multiple words, and compares each one \n      // to the data stored in each fields of each profile in \n      // Airtable. It also increases the variable 'results' by \n      // one each time a match is found. 'results' is then \n      // passed as a prop (numberOfResults) to <NoResults/>. \n      // If the 'props.numberOfResults' is zero, \n      // then <NoResults/> renders a \"No results found\" message \n      // on the page. 'results' is also passed as a prop to \n      // <SearchResults'. If props.numberOfResults' is equal \n      //to zero then <SearchResults/> returns an empty div.\n      let searchValueIndividualWords = searchValue.split(\" \")\n      let doesItInclude = data.filter(\n        (item2) => {\n          // if a field in Airtable is empty, you get an error \n          // I fixed this with the following if statement.\n          if (item2.fields.Instrument !== undefined) {\n            // This checks if the first word in the user's search matches any of the \n            // genres listed in the profiles in Airtable\n            if (item2.fields.Genre.includes(searchValueIndividualWords[0])) {\n              findMusician = data.filter(\n                (item) => item.fields.Genre === searchValueIndividualWords[0]\n              );\n              results += 1;\n            }\n            // This checks if the second word in the user's search matches \n            // any of the genres listed in the profiles in Airtable\n            if (item2.fields.Genre.includes(searchValueIndividualWords[1])) {\n              findMusician2 = data.filter(\n                (item) => item.fields.Genre === searchValueIndividualWords[1]\n              );\n              results += 1;\n            }\n            // This checks if the third word in the user's search matches \n            // any of the genres listed in the profiles in Airtable\n            if (item2.fields.Genre.includes(searchValueIndividualWords[2])) {\n              findMusician3 = data.filter(\n                (item) => item.fields.Genre === searchValueIndividualWords[2]\n              );\n              results += 1;\n            }\n            // This checks if any of the words in the user's search \n            // match any of the names of the instruments listed \n            // in the profiles in Airtable\n            if (item2.fields.Instrument.includes(searchValueIndividualWords[0])) {\n              findMusician = data.filter(\n                (item) => item.fields.Instrument === searchValueIndividualWords[0]\n              );\n              results += 1;\n            }\n            if (item2.fields.Instrument.includes(searchValueIndividualWords[1])) {\n              findMusician2 = data.filter(\n                (item) => item.fields.Instrument === searchValueIndividualWords[1]\n              );\n              results += 1;\n            }\n            if (item2.fields.Instrument.includes(searchValueIndividualWords[2])) {\n              findMusician3 = data.filter(\n                (item) => item.fields.Instrument === searchValueIndividualWords[2]\n              );\n              results += 1;\n            }\n            // This checks if any of the words in the user's search \n            // match any of the names of the locations listed \n            // in the profiles in Airtable\n            if (item2.fields.Location.includes(searchValueIndividualWords[0])) {\n              findMusician = data.filter(\n                (item) => item.fields.Location === searchValueIndividualWords[0]\n              );\n              results += 1;\n            }\n            if (item2.fields.Location.includes(searchValueIndividualWords[1])) {\n              findMusician2 = data.filter(\n                (item) => item.fields.Location === searchValueIndividualWords[1]\n              );\n              results += 1;\n            }\n            if (item2.fields.Location.includes(searchValueIndividualWords[2])) {\n              findMusician3 = data.filter(\n                (item) => item.fields.Location === searchValueIndividualWords[2]\n              );\n              results += 1;\n            }\n            // This checks if any of the words in the user's search \n            // match what the musicians listed in Airtable said they \n            // were looking for \n            if (item2.fields.Looking_for.includes(searchValueIndividualWords[0])) {\n              findMusician = data.filter(\n                (item) => item.fields.Looking_for === searchValueIndividualWords[0]\n              );\n              results += 1;\n            }\n            if (item2.fields.Looking_for.includes(searchValueIndividualWords[1])) {\n              findMusician2 = data.filter(\n                (item) => item.fields.Looking_for === searchValueIndividualWords[1]\n              );\n              results += 1;\n            }\n            if (item2.fields.Looking_for.includes(searchValueIndividualWords[2])) {\n              findMusician3 = data.filter(\n                (item) => item.fields.Looking_for === searchValueIndividualWords[2]\n              );\n              results += 1;\n            }\n            // This checks if any of the words in the user's search \n            // match any of the names listed in the profiles in Airtable\n            if (item2.fields.Musician.includes(searchValueIndividualWords[0])) {\n              findMusician = data.filter(\n                (item) => item.fields.Musician === searchValueIndividualWords[0]\n              );\n              results += 1;\n            }\n            if (item2.fields.Musician.includes(searchValueIndividualWords[1])) {\n              findMusician2 = data.filter(\n                (item) => item.fields.Musician === searchValueIndividualWords[1]\n              );\n              results += 1;\n            }\n            if (item2.fields.Musician.includes(searchValueIndividualWords[2])) {\n              findMusician3 = data.filter(\n                (item) => item.fields.Musician === searchValueIndividualWords[2]\n              );\n              results += 1;\n              }\n            }\n          }\n        )\n    }\n    // we update the values of 'searchResult1', 'searchResult2', \n    // and 'searchResult3' to hold the profiles that contain\n    // information that matches the words in the user's search\n    // I might've been able to use 'setSearchResults1' inside of \n    // 'doesitInclude' above.\n    setSearchResult1(findMusician)\n    setSearchResult2(findMusician2)\n    setSearchResult3(findMusician3)\n    setSearchValue(results)\n    // if there are no matches, we hear the 'ba dum tss' drum sound\n    // if there are matches, we hear the violin sound.\n    if (results > 0) {\n      violinAudio.play()\n    }\n    else {\n      drumAudio.play()\n    }\n   };\n   \n\n  return (\n    <div>\n      <header>\n        <div className=\"headerBackground\">\n            <Link onClick={function (){ bassAudio.play() }} to=\"/\"><p>Join the Band!</p></Link>\n            {/* <p id=\"website-description-text\">find musicians in your area</p> */}\n          <Link\n        onClick={function () {\n          bassAudioTwo.play();\n        }}\n        to=\"/form\"\n      >\n        <p>Make a post!</p>\n      </Link>\n      <Link\n        onClick={function () {\n          guitarAudio.play();\n        }}\n        to=\"/profiles\"\n      >\n        <p>View All Posts</p>\n          </Link>\n          <div className=\"searchBarDiv\">\n          {/* <p><em id = \"searchInstructions\">Search for musicians by instrument,location, genre, etc</em></p> */}\n          <label htmlFor=\"searchBar\"><p>Search for musicians:</p></label>\n          {/* storing the user's input in the state variable searchValue */}\n          <input name=\"searchBar\" type=\"text\" placeholder=\"instrument,location,genre, etc\" onChange={search} />\n          <Link to=\"/search\">\n            <button id=\"search-button\" onClick={searchSubmit}>Submit</button>\n          </Link>\n          {/* <p>{warningMessage}</p> */}\n        </div>\n        </div>\n      </header>\n      <main>\n        \n        <Route exact path=\"/\">\n          <Home data={data}/>\n        </Route>\n        <Route path=\"/form\">\n          {/* setToggleFetch is passed as a prop to Form */}\n          <Form data={data} refresh={setToggleFetch}/>\n        </Route>\n        <Route path=\"/profiles\">\n          <AllProfiles data={data}/>\n        </Route>\n        <Route path=\"/search\">\n          <SearchResults warningMessage={warningMessage} musician={searchResult1} numberOfResults={searchValue}/>\n          <SearchResults warningMessage={warningMessage} musician={searchResult2} numberOfResults={searchValue} />\n          <SearchResults warningMessage={warningMessage} musician={searchResult3} numberOfResults={searchValue} />\n          <NoResults warningMessage={warningMessage} numberOfResults={searchValue} />\n        </Route>\n      </main>\n      <footer>\n        <h3>copyright David Verghese</h3>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/services/index.js",[],["56","57"],"/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/components/Form.jsx",[],"/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/components/Home.jsx",["58"],"import { Link } from \"react-router-dom\";\nimport basssoundtwo from \"../sounds/harpsound.mp3\";\nimport guitarsound from \"../sounds/guitarstrum.mp3\";\n\nfunction Home(props) {\n  const bassAudioTwo = new Audio(basssoundtwo);\n  bassAudioTwo.volume = 0.02;\n  const guitarAudio = new Audio(guitarsound);\n  guitarAudio.volume = 0.02;\n\n  return (\n    <div className=\"home\">\n      <h2>Join The Band: find musicians in your area</h2>\n      <img\n        alt=\"a band on stage\"\n        id=\"homePic\"\n        src=\"https://blog.loopearplugs.com/wp-content/uploads/2019/05/applause-audience-band-167636.jpg\"\n      />\n      <em>\n        <h2>This could be you</h2>\n      </em>\n      {/* <Link\n        onClick={function () {\n          bassAudioTwo.play();\n        }}\n        to=\"/form\"\n      >\n        <button>Make a post!</button>\n      </Link>\n      <Link\n        onClick={function () {\n          guitarAudio.play();\n        }}\n        to=\"/profiles\"\n      >\n        <button>View All Posts</button>\n      </Link> */}\n    </div>\n  );\n}\n\nexport default Home;\n","/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/components/AllProfiles.jsx",["59","60","61"],"import Profile from \"./Profile.jsx\";\nimport axios from \"axios\";\nimport { baseURL, config } from \"../services\";\nimport drumfill from \"../sounds/drumfill.mp3\";\n\nfunction AllProfiles(props) {\n  const drumFillAudio = new Audio(drumfill);\n  drumFillAudio.volume = 0.02;\n\n  return (\n    <div>\n      <a href=\"top\" name=\"top\">\n        <h2>Profiles:</h2>\n      </a>\n      {props.data.map((item) => {\n        // item stores data of musician's profile\n        return (\n          <div>\n            {/* pass item as prop to Profile */}\n            <Profile item={item} />\n          </div>\n        );\n      })}\n      <a href=\"#top\">\n        <button\n          onClick={function () {\n            drumFillAudio.play();\n          }}\n        >\n          Back to Top\n        </button>\n      </a>\n    </div>\n  );\n}\n\nexport default AllProfiles;\n","/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/components/SearchResults.jsx",[],"/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/components/Profile.jsx",["62"],"import SocialMedia from \"./SocialMedia.jsx\";\nimport { useState } from \"react\";\nimport bongo from \"../sounds/bongo.mp3\";\n\nfunction Profile(props) {\n  const bongoAudio = new Audio(bongo);\n  bongoAudio.volume = 0.02;\n  // the function below allows us to hide and show the social \n  // media icon. When you click the button, you set the \n  // socialMediaDisplay value, which is a boolean value to be the \n  // opposite of what it previously was. This is then passed as \n  // a prop to <SocialMedia/>. The social media icons only \n  // display when socialMediaDisplay is true, thus allowing us \n  // to display or hide them by clicking on them.\n  const socialMediaButton = () => {\n    setSocialMediaDisplay(!socialMediaDisplay);\n    if (!socialMediaDisplay) {\n      bongoAudio.play();\n    }\n  };\n  const [socialMediaDisplay, setSocialMediaDisplay] = useState(false);\n\n  return (\n    <div className=\"profile\">\n      <div className=\"profilebackground\">\n        <h2>{props.item.fields.Musician}</h2>\n        <img alt=\"profile photo of musician\" src={props.item.fields.Picture}></img>\n        <p>Instrument: {props.item.fields.Instrument}</p>\n        <p>Genre: {props.item.fields.Genre}</p>\n        <p>Looking for: {props.item.fields.Looking_for}</p>\n        <p>Location: {props.item.fields.Location}</p>\n        <div id=\"socialMediaButton\">\n          <button onClick={socialMediaButton}>Social Media</button>\n        </div>\n        <SocialMedia item={props.item} todisplay={socialMediaDisplay} />\n        <br></br>\n      </div>\n    </div>\n  );\n}\n\nexport default Profile;\n","/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/components/NoResults.jsx",[],"/Users/joeverghese/GeneralAssembly/sei/garnet/unit_2/joinTheBand/jointheband/src/components/SocialMedia.jsx",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":98,"column":11,"nodeType":"69","messageId":"70","endLine":98,"endColumn":24},{"ruleId":"71","severity":1,"message":"72","line":99,"column":17,"nodeType":"73","messageId":"74","endLine":99,"endColumn":19},{"ruleId":"63","replacedBy":"75"},{"ruleId":"65","replacedBy":"76"},{"ruleId":"67","severity":1,"message":"77","line":1,"column":10,"nodeType":"69","messageId":"70","endLine":1,"endColumn":14},{"ruleId":"67","severity":1,"message":"78","line":2,"column":8,"nodeType":"69","messageId":"70","endLine":2,"endColumn":13},{"ruleId":"67","severity":1,"message":"79","line":3,"column":10,"nodeType":"69","messageId":"70","endLine":3,"endColumn":17},{"ruleId":"67","severity":1,"message":"80","line":3,"column":19,"nodeType":"69","messageId":"70","endLine":3,"endColumn":25},{"ruleId":"81","severity":1,"message":"82","line":27,"column":9,"nodeType":"83","endLine":27,"endColumn":78},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'doesItInclude' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["84"],["85"],"'Link' is defined but never used.","'axios' is defined but never used.","'baseURL' is defined but never used.","'config' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]