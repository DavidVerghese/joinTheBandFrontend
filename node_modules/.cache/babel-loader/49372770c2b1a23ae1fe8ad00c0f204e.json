{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/joeverghese/2023/joinTheBand/joinTheBand/jointheband/src/components/Signup.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { useHistory } from \"react-router-dom\";\n\nfunction Signup({\n  baseURL,\n  genres,\n  setGenres,\n  instruments,\n  setInstruments,\n  locations,\n  setLocations,\n  users,\n  setUsers\n}) {\n  _s();\n\n  let history = useHistory();\n  const [user, setUser] = useState({\n    username: \"\",\n    password: \"\",\n    email_address: \"\",\n    picture_url: \"\",\n    genre: \"\",\n    instrument: \"\",\n    location: \"\",\n    looking_for: \"\"\n  });\n  const [signupErrors, setSignupErrors] = useState([]);\n\n  const handleSubmitSignUp = e => {\n    debugger;\n    e.preventDefault();\n    console.log(user);\n    fetch(`${baseURL}/signup`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: user.username,\n        password: user.password,\n        email_address: user.email_address,\n        picture_url: user.picture_url,\n        genre: user.genre,\n        instrument: user.instrument,\n        location: user.location,\n        looking_for: user.looking_for\n      })\n    }).then(resp => {\n      if (resp.ok) {\n        resp.json().then(data => {\n          setSignupErrors([]);\n\n          if (!genres.includes(data.genre)) {\n            setGenres([...genres, data.genre]);\n          }\n\n          if (!instruments.includes(data.instrument)) {\n            setInstruments([...genres, data.instrument]);\n          }\n\n          if (!locations.includes(data.location)) {\n            setLocations([...locations, data.location]);\n          }\n\n          setUsers([...users, data]);\n          setCurrentUser(data);\n          history.push(\"/profiles\");\n        });\n      } else {\n        resp.json().then(json => setSignupErrors(json.errors));\n      }\n    });\n  };\n\n  const handleChange = e => {\n    setUser({ ...user,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Signup, \"f0k3Yfz135NtnlxMyqDtQzgrq5U=\", false, function () {\n  return [useHistory];\n});\n\n_c = Signup;\nexport default Signup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"sources":["/Users/joeverghese/2023/joinTheBand/joinTheBand/jointheband/src/components/Signup.jsx"],"names":["useState","useEffect","Form","Button","useHistory","Signup","baseURL","genres","setGenres","instruments","setInstruments","locations","setLocations","users","setUsers","history","user","setUser","username","password","email_address","picture_url","genre","instrument","location","looking_for","signupErrors","setSignupErrors","handleSubmitSignUp","e","preventDefault","console","log","fetch","method","headers","body","JSON","stringify","name","then","resp","ok","json","data","includes","setCurrentUser","push","errors","handleChange","target","value"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { useHistory } from \"react-router-dom\";\n\nfunction Signup({baseURL,genres,setGenres,instruments,setInstruments,locations,setLocations, users,setUsers}) {\n  let history = useHistory();\n  const [user, setUser] = useState({\n    username: \"\",\n    password: \"\",\n    email_address: \"\", \n    picture_url: \"\",\n    genre: \"\",                                            \n    instrument: \"\",                                        \n    location: \"\", \n    looking_for: \"\"\n  });\n  const [signupErrors, setSignupErrors] = useState([]);\n\n  const handleSubmitSignUp = e => {\n\n    debugger;\n    e.preventDefault();\n\n    console.log(user);\n    fetch(`${baseURL}/signup`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: user.username,\n        password: user.password,\n        email_address: user.email_address, \n        picture_url: user.picture_url,\n        genre: user.genre,                                            \n        instrument: user.instrument,                                        \n        location: user.location, \n        looking_for: user.looking_for\n      }),\n     \n    }).then(resp => {\n      if(resp.ok){\n        resp.json().then(data => {\n          setSignupErrors([])\n          if (!genres.includes(data.genre)) {\n            setGenres([...genres,data.genre])\n          }\n          if (!instruments.includes(data.instrument)) {\n            setInstruments([...genres,data.instrument])\n          }\n          if (!locations.includes(data.location)) {\n            setLocations([...locations,data.location])\n          }\n          setUsers([...users,data])\n          setCurrentUser(data);\n          history.push(\"/profiles\");\n         \n         })\n      }else {\n         resp.json().then(json => setSignupErrors(json.errors))\n      }\n   })\n\n  } \n\n  const handleChange = e => {\n    setUser({\n      ...user,\n      [e.target.name]: e.target.value\n    })\n  }\n\n\n  return <div>\n\n  </div>\n}\nexport default Signup;"]},"metadata":{},"sourceType":"module"}