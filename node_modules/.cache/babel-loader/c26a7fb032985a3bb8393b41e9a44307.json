{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/joeverghese/2023/joinTheBand/joinTheBand/jointheband/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { baseURL, config } from \"./services\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Route, Link } from \"react-router-dom\";\nimport Form from \"./components/Form.jsx\";\nimport Home from \"./components/Home.jsx\";\nimport AllProfiles from \"./components/AllProfiles.jsx\";\nimport SearchResults from \"./components/SearchResults.jsx\";\nimport NoResults from \"./components/NoResults.jsx\";\nimport violinsound from \"./sounds/violinsound.mp3\";\nimport basssound from \"./sounds/basssoundone.mp3\";\nimport drumsound from \"./sounds/drumsound.mp3\";\nimport basssoundtwo from \"./sounds/harpsound.mp3\";\nimport guitarsound from \"./sounds/guitarstrum.mp3\";\nimport Landing from './components/Landing';\n\nfunction App() {\n  _s();\n\n  const bassAudioTwo = new Audio(basssoundtwo);\n  bassAudioTwo.volume = 0.02;\n  const guitarAudio = new Audio(guitarsound);\n  guitarAudio.volume = 0.02;\n  const [users, setUsers] = useState([]);\n  const [data, setData] = useState([]);\n  let results = 0; // we will we use findMusician and searchResult to \n  // store profiles that match the user's search later on\n\n  let findMusician = [];\n  let findMusician2 = [];\n  let findMusician3 = []; // state variables\n\n  const [searchResult1, setSearchResult1] = useState([]);\n  const [searchResult2, setSearchResult2] = useState([]);\n  const [searchResult3, setSearchResult3] = useState([]);\n  const [searchValue, setSearchValue] = useState([]);\n  const [warningMessage, setWarningMessage] = useState('');\n  const [numberOfResults, setNumberOfResults] = useState(0); // here we create variables to represent the sounds we \n  // have stored in the sound folder. Later on, we will \n  // trigger these sounds in response to user input\n\n  const violinAudio = new Audio(violinsound);\n  violinAudio.volume = 0.05;\n  const bassAudio = new Audio(basssound);\n  bassAudio.volume = 0.05;\n  const drumAudio = new Audio(drumsound);\n  drumAudio.volume = 0.05;\n  const [toggleFetch, setToggleFetch] = useState(true);\n  useEffect(() => {\n    async function getData() {\n      let response = await axios.get(baseURL + '/Musicians', config);\n      setData(response.data.records);\n    }\n\n    getData(); // toggleFetch makes sure that API call occurs \n    // everytime the boolean value of 'toggleFetch' changes.\n    // In our <Form/>, there is a 'refresh' pop equal to \n    // 'toggleFetch.' When you click the submit button on the form\n    // an axios.put request is made to Airtable, and\n    // props.refresh is changed to be the opposite of \n    // whatever it previously was. Thus 'toggleFetch' is changed.\n    // this ensures than useEffect runs again, and the new profile \n    // we just created is pulled down into React.\n  }, [toggleFetch]); // useEffect(() => {\n  //   // debugger;\n  //   fetch(\"http://api.randomuser.me/\")\n  //     .then((response) => response.json())\n  //     .then((data) => {\n  //       console.log(data);\n  //     });\n  // }, []);\n\n  useEffect(() => {\n    // debugger;\n    fetch(\"http://localhost:3000/users/\").then(response => response.json()).then(data => {\n      setUsers(data);\n    });\n  }, []);\n\n  const search = e => {\n    // sets the state variable 'searchValue' equal to the user's \n    // input\n    setSearchValue(e.target.value);\n  }; // the search function \n\n\n  const searchSubmit = e => {\n    // if you press enter more than once, you get a number\n    // instead of a string. I used this to create a warning message.\n    if (typeof searchValue === 'number') {\n      // e.preventDefault();\n      results = 0;\n      setWarningMessage(\"* type something new!\");\n    } else {\n      setWarningMessage(\"\");\n    }\n\n    if (searchValue.length > 0) {\n      // if there are multiple words in the user's seach, \n      // eg 'Guitar NYC', searchValueIndividualWords splits \n      // them into multiple words, and compares each one \n      // to the data stored in each fields of each profile in \n      // Airtable. It also increases the variable 'results' by \n      // one each time a match is found. 'results' is then \n      // passed as a prop (numberOfResults) to <NoResults/>. \n      // If the 'props.numberOfResults' is zero, \n      // then <NoResults/> renders a \"No results found\" message \n      // on the page. 'results' is also passed as a prop to \n      // <SearchResults'. If props.numberOfResults' is equal \n      //to zero then <SearchResults/> returns an empty div.\n      let searchValueIndividualWords = searchValue.split(\" \");\n      let doesItInclude = data.filter(item2 => {\n        // if a field in Airtable is empty, you get an error \n        // I fixed this with the following if statement.\n        if (item2.fields.Instrument !== undefined) {\n          // This checks if the first word in the user's search matches any of the \n          // genres listed in the profiles in Airtable\n          if (item2.fields.Genre.includes(searchValueIndividualWords[0])) {\n            findMusician = data.filter(item => item.fields.Genre === searchValueIndividualWords[0]); // results += 1;\n\n            if (findMusician.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          } // This checks if the second word in the user's search matches \n          // any of the genres listed in the profiles in Airtable\n\n\n          if (item2.fields.Genre.includes(searchValueIndividualWords[1])) {\n            findMusician2 = data.filter(item => item.fields.Genre === searchValueIndividualWords[1]); // results += 1;\n\n            if (findMusician2.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          } // This checks if the third word in the user's search matches \n          // any of the genres listed in the profiles in Airtable\n\n\n          if (item2.fields.Genre.includes(searchValueIndividualWords[2])) {\n            findMusician3 = data.filter(item => item.fields.Genre === searchValueIndividualWords[2]); // results += 1;\n\n            if (findMusician3.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          } // This checks if any of the words in the user's search \n          // match any of the names of the instruments listed \n          // in the profiles in Airtable\n\n\n          if (item2.fields.Instrument.includes(searchValueIndividualWords[0])) {\n            findMusician = data.filter(item => item.fields.Instrument === searchValueIndividualWords[0]); // results += 1;\n\n            if (findMusician.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          }\n\n          if (item2.fields.Instrument.includes(searchValueIndividualWords[1])) {\n            findMusician2 = data.filter(item => item.fields.Instrument === searchValueIndividualWords[1]); // results += 1;\n\n            if (findMusician2.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          }\n\n          if (item2.fields.Instrument.includes(searchValueIndividualWords[2])) {\n            findMusician3 = data.filter(item => item.fields.Instrument === searchValueIndividualWords[2]); // results += 1;\n\n            if (findMusician3.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          } // This checks if any of the words in the user's search \n          // match any of the names of the locations listed \n          // in the profiles in Airtable\n\n\n          if (item2.fields.Location.includes(searchValueIndividualWords[0])) {\n            findMusician = data.filter(item => item.fields.Location === searchValueIndividualWords[0]); // results += 1;\n\n            if (findMusician.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          }\n\n          ;\n\n          if (item2.fields.Location.includes(searchValueIndividualWords[1])) {\n            findMusician2 = data.filter(item => item.fields.Location === searchValueIndividualWords[1]); // results += 1;\n\n            if (findMusician2.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          }\n\n          if (item2.fields.Location.includes(searchValueIndividualWords[2])) {\n            findMusician3 = data.filter(item => item.fields.Location === searchValueIndividualWords[2]); // results += 1;\n\n            if (findMusician3.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          } // This checks if any of the words in the user's search \n          // match what the musicians listed in Airtable said they \n          // were looking for \n\n\n          if (item2.fields.Looking_for.includes(searchValueIndividualWords[0])) {\n            findMusician = data.filter(item => item.fields.Looking_for === searchValueIndividualWords[0]); // results += 1;\n\n            if (findMusician.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          }\n\n          if (item2.fields.Looking_for.includes(searchValueIndividualWords[1])) {\n            findMusician2 = data.filter(item => item.fields.Looking_for === searchValueIndividualWords[1]); // results += 1;\n\n            if (findMusician2.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          }\n\n          if (item2.fields.Looking_for.includes(searchValueIndividualWords[2])) {\n            findMusician3 = data.filter(item => item.fields.Looking_for === searchValueIndividualWords[2]); // results += 1;\n\n            if (findMusician3.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          } // This checks if any of the words in the user's search \n          // match any of the names listed in the profiles in Airtable\n\n\n          if (item2.fields.Musician.includes(searchValueIndividualWords[0])) {\n            findMusician = data.filter(item => item.fields.Musician === searchValueIndividualWords[0]); // results += 1;\n\n            if (findMusician.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          }\n\n          if (item2.fields.Musician.includes(searchValueIndividualWords[1])) {\n            findMusician2 = data.filter(item => item.fields.Musician === searchValueIndividualWords[1]); // results += 1;\n\n            if (findMusician2.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          }\n\n          if (item2.fields.Musician.includes(searchValueIndividualWords[2])) {\n            findMusician3 = data.filter(item => item.fields.Musician === searchValueIndividualWords[2]); // results += 1;\n\n            if (findMusician3.length !== 0) {\n              results += 1;\n            }\n\n            ;\n          }\n        }\n      });\n    } // we update the values of 'searchResult1', 'searchResult2', \n    // and 'searchResult3' to hold the profiles that contain\n    // information that matches the words in the user's search\n    // I might've been able to use 'setSearchResults1' inside of \n    // 'doesitInclude' above.\n\n\n    setSearchResult1(findMusician);\n    setSearchResult2(findMusician2);\n    setSearchResult3(findMusician3);\n    setSearchValue(results);\n    setNumberOfResults(results); // if there are no matches, we hear the 'ba dum tss' drum sound\n    // if there are matches, we hear the violin sound.\n\n    if (results > 0) {\n      violinAudio.play();\n    } else {\n      drumAudio.play();\n    }\n  };\n\n  const [genres, setGenres] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:3000/genres\").then(response => response.json()).then(data => {\n      setGenres(data);\n    });\n  }, []);\n  const [instruments, setInstruments] = useState([]);\n  const [locations, setLocations] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:3000/instruments\").then(response => response.json()).then(data => {\n      setInstruments(data);\n    });\n  }, []);\n  useEffect(() => {\n    fetch(\"http://localhost:3000/locations\").then(response => response.json()).then(data => {\n      setLocations(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(Landing, {\n          instruments: instruments,\n          lgenres: genres,\n          setGenres: setGenres\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/form\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          data: data,\n          refresh: setToggleFetch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/profiles\",\n        children: /*#__PURE__*/_jsxDEV(AllProfiles, {\n          genres: genres,\n          users: users,\n          refresh: setToggleFetch,\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/search\",\n        children: [/*#__PURE__*/_jsxDEV(SearchResults, {\n          warningMessage: warningMessage,\n          musician: searchResult1,\n          numberOfResults: searchValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n          warningMessage: warningMessage,\n          musician: searchResult2,\n          numberOfResults: searchValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n          warningMessage: warningMessage,\n          musician: searchResult3,\n          numberOfResults: searchValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NoResults, {\n          warningMessage: warningMessage,\n          numberOfResults: numberOfResults\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"k6BeW7l2M9FdczDOZSX3wJVWDsU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/joeverghese/2023/joinTheBand/joinTheBand/jointheband/src/App.js"],"names":["baseURL","config","useEffect","useState","axios","Route","Link","Form","Home","AllProfiles","SearchResults","NoResults","violinsound","basssound","drumsound","basssoundtwo","guitarsound","Landing","App","bassAudioTwo","Audio","volume","guitarAudio","users","setUsers","data","setData","results","findMusician","findMusician2","findMusician3","searchResult1","setSearchResult1","searchResult2","setSearchResult2","searchResult3","setSearchResult3","searchValue","setSearchValue","warningMessage","setWarningMessage","numberOfResults","setNumberOfResults","violinAudio","bassAudio","drumAudio","toggleFetch","setToggleFetch","getData","response","get","records","fetch","then","json","search","e","target","value","searchSubmit","length","searchValueIndividualWords","split","doesItInclude","filter","item2","fields","Instrument","undefined","Genre","includes","item","Location","Looking_for","Musician","play","genres","setGenres","instruments","setInstruments","locations","setLocations"],"mappings":"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","sourcesContent":["import './App.css';\nimport { baseURL, config } from \"./services\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\"\nimport { Route, Link } from \"react-router-dom\";\nimport Form from \"./components/Form.jsx\"\nimport Home from \"./components/Home.jsx\"\nimport AllProfiles from \"./components/AllProfiles.jsx\"\nimport SearchResults from \"./components/SearchResults.jsx\"\nimport NoResults from \"./components/NoResults.jsx\"\nimport violinsound from \"./sounds/violinsound.mp3\"\nimport basssound from \"./sounds/basssoundone.mp3\"\nimport drumsound from \"./sounds/drumsound.mp3\";\nimport basssoundtwo from \"./sounds/harpsound.mp3\";\nimport guitarsound from \"./sounds/guitarstrum.mp3\";\nimport Landing from './components/Landing';\nfunction App() {\n  const bassAudioTwo = new Audio(basssoundtwo);\n  bassAudioTwo.volume = 0.02;\n  const guitarAudio = new Audio(guitarsound);\n  guitarAudio.volume = 0.02;\n  const [users, setUsers] = useState([]);\n  const [data, setData] = useState([])\n  let results = 0;\n  // we will we use findMusician and searchResult to \n  // store profiles that match the user's search later on\n  let findMusician = [];\n  let findMusician2 = [];\n  let findMusician3 = [];\n  // state variables\n  const [searchResult1, setSearchResult1] = useState([]);\n  const [searchResult2, setSearchResult2] = useState([]);\n  const [searchResult3, setSearchResult3] = useState([]);\n  const [searchValue, setSearchValue] = useState([]);\n  const [warningMessage, setWarningMessage] = useState('');\n  const [numberOfResults, setNumberOfResults] = useState(0);\n  // here we create variables to represent the sounds we \n  // have stored in the sound folder. Later on, we will \n  // trigger these sounds in response to user input\n  const violinAudio = new Audio(violinsound);\n  violinAudio.volume = 0.05;\n  const bassAudio = new Audio(basssound);\n  bassAudio.volume = 0.05;\n  const drumAudio = new Audio(drumsound);\n  drumAudio.volume = 0.05;\n  const [toggleFetch, setToggleFetch] = useState(true)\n  \n  useEffect(() => {\n    async function getData() {\n      let response = await axios.get(baseURL + '/Musicians', config)\n      setData(response.data.records)\n    }\n    getData();\n    // toggleFetch makes sure that API call occurs \n    // everytime the boolean value of 'toggleFetch' changes.\n    // In our <Form/>, there is a 'refresh' pop equal to \n    // 'toggleFetch.' When you click the submit button on the form\n    // an axios.put request is made to Airtable, and\n    // props.refresh is changed to be the opposite of \n    // whatever it previously was. Thus 'toggleFetch' is changed.\n    // this ensures than useEffect runs again, and the new profile \n    // we just created is pulled down into React.\n  }, [toggleFetch]);\n\n  // useEffect(() => {\n  //   // debugger;\n  //   fetch(\"http://api.randomuser.me/\")\n  //     .then((response) => response.json())\n  //     .then((data) => {\n  //       console.log(data);\n  //     });\n  // }, []);\n\n  useEffect(() => {\n    // debugger;\n    fetch(\"http://localhost:3000/users/\")\n      .then((response) => response.json())\n      .then((data) => {\n        setUsers(data);\n      });\n  }, []);\n\n\n\n \n\n  const search = (e) => {\n    // sets the state variable 'searchValue' equal to the user's \n    // input\n      setSearchValue(e.target.value)\n  };\n\n  // the search function \n\n  const searchSubmit = (e) => {\n    // if you press enter more than once, you get a number\n    // instead of a string. I used this to create a warning message.\n    if (typeof searchValue === 'number') {\n      // e.preventDefault();\n      results = 0;\n      setWarningMessage(\"* type something new!\")\n    }\n    else {\n      setWarningMessage(\"\")\n    }\n    if (searchValue.length > 0) {\n      // if there are multiple words in the user's seach, \n      // eg 'Guitar NYC', searchValueIndividualWords splits \n      // them into multiple words, and compares each one \n      // to the data stored in each fields of each profile in \n      // Airtable. It also increases the variable 'results' by \n      // one each time a match is found. 'results' is then \n      // passed as a prop (numberOfResults) to <NoResults/>. \n      // If the 'props.numberOfResults' is zero, \n      // then <NoResults/> renders a \"No results found\" message \n      // on the page. 'results' is also passed as a prop to \n      // <SearchResults'. If props.numberOfResults' is equal \n      //to zero then <SearchResults/> returns an empty div.\n      let searchValueIndividualWords = searchValue.split(\" \")\n      let doesItInclude = data.filter(\n        (item2) => {\n          // if a field in Airtable is empty, you get an error \n          // I fixed this with the following if statement.\n          if (item2.fields.Instrument !== undefined) {\n            // This checks if the first word in the user's search matches any of the \n            // genres listed in the profiles in Airtable\n            if (item2.fields.Genre.includes(searchValueIndividualWords[0])) {\n              findMusician = data.filter(\n                (item) => item.fields.Genre === searchValueIndividualWords[0]\n              );\n              // results += 1;\n              if (findMusician.length !== 0) {\n                results += 1;\n              };\n            }\n            // This checks if the second word in the user's search matches \n            // any of the genres listed in the profiles in Airtable\n            if (item2.fields.Genre.includes(searchValueIndividualWords[1])) {\n              findMusician2 = data.filter(\n                (item) => item.fields.Genre === searchValueIndividualWords[1]\n              );\n              // results += 1;\n              if (findMusician2.length !== 0) {\n                results += 1;\n              };\n            }\n            // This checks if the third word in the user's search matches \n            // any of the genres listed in the profiles in Airtable\n            if (item2.fields.Genre.includes(searchValueIndividualWords[2])) {\n              findMusician3 = data.filter(\n                (item) => item.fields.Genre === searchValueIndividualWords[2]\n              );\n              // results += 1;\n              if (findMusician3.length !== 0) {\n                results += 1;\n              };\n            }\n            // This checks if any of the words in the user's search \n            // match any of the names of the instruments listed \n            // in the profiles in Airtable\n            if (item2.fields.Instrument.includes(searchValueIndividualWords[0])) {\n              findMusician = data.filter(\n                (item) => item.fields.Instrument === searchValueIndividualWords[0]\n              );\n              // results += 1;\n              if (findMusician.length !== 0) {\n                results += 1;\n              };\n            }\n            if (item2.fields.Instrument.includes(searchValueIndividualWords[1])) {\n              findMusician2 = data.filter(\n                (item) => item.fields.Instrument === searchValueIndividualWords[1]\n              );\n              // results += 1;\n              if (findMusician2.length !== 0) {\n                results += 1;\n              };\n            }\n            if (item2.fields.Instrument.includes(searchValueIndividualWords[2])) {\n              findMusician3 = data.filter(\n                (item) => item.fields.Instrument === searchValueIndividualWords[2]\n              );\n              // results += 1;\n              if (findMusician3.length !== 0) {\n                results += 1;\n              };\n            }\n            // This checks if any of the words in the user's search \n            // match any of the names of the locations listed \n            // in the profiles in Airtable\n            if (item2.fields.Location.includes(searchValueIndividualWords[0])) {\n              findMusician = data.filter(\n                (item) => item.fields.Location === searchValueIndividualWords[0]\n              );\n              // results += 1;\n              if (findMusician.length !== 0) {\n                results += 1;\n              };\n            };\n            if (item2.fields.Location.includes(searchValueIndividualWords[1])) {\n              findMusician2 = data.filter(\n                (item) => item.fields.Location === searchValueIndividualWords[1]\n              );\n              // results += 1;\n              if (findMusician2.length !== 0) {\n                results += 1;\n              };\n            }\n            if (item2.fields.Location.includes(searchValueIndividualWords[2])) {\n              findMusician3 = data.filter(\n                (item) => item.fields.Location === searchValueIndividualWords[2]\n              );\n              // results += 1;\n              if (findMusician3.length !== 0) {\n                results += 1;\n              };\n            }\n            // This checks if any of the words in the user's search \n            // match what the musicians listed in Airtable said they \n            // were looking for \n            if (item2.fields.Looking_for.includes(searchValueIndividualWords[0])) {\n              findMusician = data.filter(\n                (item) => item.fields.Looking_for === searchValueIndividualWords[0]\n              );\n              // results += 1;\n              if (findMusician.length !== 0) {\n                results += 1;\n              };\n            }\n            if (item2.fields.Looking_for.includes(searchValueIndividualWords[1])) {\n              findMusician2 = data.filter(\n                (item) => item.fields.Looking_for === searchValueIndividualWords[1]\n              );\n              // results += 1;\n              if (findMusician2.length !== 0) {\n                results += 1;\n              };\n            }\n            if (item2.fields.Looking_for.includes(searchValueIndividualWords[2])) {\n              findMusician3 = data.filter(\n                (item) => item.fields.Looking_for === searchValueIndividualWords[2]\n              );\n              // results += 1;\n              if (findMusician3.length !== 0) {\n                results += 1;\n              };\n            }\n            // This checks if any of the words in the user's search \n            // match any of the names listed in the profiles in Airtable\n            if (item2.fields.Musician.includes(searchValueIndividualWords[0])) {\n              findMusician = data.filter(\n                (item) => item.fields.Musician === searchValueIndividualWords[0]\n              );\n              // results += 1;\n              if (findMusician.length !== 0) {\n                results += 1;\n              };\n            }\n            if (item2.fields.Musician.includes(searchValueIndividualWords[1])) {\n              findMusician2 = data.filter(\n                (item) => item.fields.Musician === searchValueIndividualWords[1]\n              );\n              // results += 1;\n              if (findMusician2.length !== 0) {\n                results += 1;\n              };\n            }\n            if (item2.fields.Musician.includes(searchValueIndividualWords[2])) {\n              findMusician3 = data.filter(\n                (item) => item.fields.Musician === searchValueIndividualWords[2]\n              );\n              // results += 1;\n              if (findMusician3.length !== 0) {\n                results += 1;\n              };\n              }\n            }\n          }\n        )\n    }\n    // we update the values of 'searchResult1', 'searchResult2', \n    // and 'searchResult3' to hold the profiles that contain\n    // information that matches the words in the user's search\n    // I might've been able to use 'setSearchResults1' inside of \n    // 'doesitInclude' above.\n    setSearchResult1(findMusician)\n    setSearchResult2(findMusician2)\n    setSearchResult3(findMusician3)\n    setSearchValue(results);\n    setNumberOfResults(results);\n    // if there are no matches, we hear the 'ba dum tss' drum sound\n    // if there are matches, we hear the violin sound.\n    if (results > 0) {\n      violinAudio.play()\n    }\n    else {\n      drumAudio.play()\n    }\n  };\n\n  const [genres, setGenres] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:3000/genres\")\n      .then((response) => response.json())\n      .then((data) => {\n        setGenres(data);\n      });\n  }, []);\n   \n  const [instruments, setInstruments] = useState([]);\n  const [locations, setLocations] = useState([]);\n\n  \n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/instruments\")\n      .then((response) => response.json())\n      .then((data) => {\n        setInstruments(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/locations\")\n      .then((response) => response.json())\n      .then((data) => {\n        setLocations(data);\n      });\n  }, []);\n\n  return (\n    <div>\n      {/* <header>\n        <div className=\"headerBackground\">\n            <Link onClick={function (){ bassAudio.play() }} to=\"/\"><p>Join the Band!</p></Link>\n          <Link\n        onClick={function () {\n          bassAudioTwo.play();\n        }}\n        to=\"/form\"\n      >\n        <p>Make a post!</p>\n      </Link>\n      <Link\n        onClick={function () {\n          guitarAudio.play();\n        }}\n        to=\"/profiles\"\n      >\n            <p>View All Posts</p>\n            \n          </Link>\n          <p>Search for musicians:</p>\n          <div className=\"searchBarDiv\">\n          <label htmlFor=\"searchBar\"></label>\n        \n          <input name=\"searchBar\" type=\"text\" placeholder=\"instrument,location,genre, etc\" onChange={search} />\n          <Link to=\"/search\">\n            <button id=\"search-button\" onClick={searchSubmit}>Submit</button>\n          </Link>\n        </div>\n        </div>\n      </header> */}\n      <main>\n        \n        <Route exact path=\"/\">\n          {/* <Home data={data}/> */}\n          <Landing instruments={instruments} lgenres={genres} setGenres={setGenres}/>\n        </Route>\n        <Route path=\"/form\">\n          {/* setToggleFetch is passed as a prop to Form */}\n          <Form data={data} refresh={setToggleFetch}/>\n        </Route>\n        <Route path=\"/profiles\">\n          <AllProfiles genres={genres} users={users} refresh={setToggleFetch} data={data}/>\n        </Route>\n        <Route path=\"/search\">\n          <SearchResults warningMessage={warningMessage} musician={searchResult1} numberOfResults={searchValue}/>\n          <SearchResults warningMessage={warningMessage} musician={searchResult2} numberOfResults={searchValue} />\n          <SearchResults warningMessage={warningMessage} musician={searchResult3} numberOfResults={searchValue} />\n          <NoResults warningMessage={warningMessage} numberOfResults={numberOfResults} />\n        </Route>\n      </main>\n      {/* <footer>\n        <h3>copyright David Verghese</h3>\n      </footer> */}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}